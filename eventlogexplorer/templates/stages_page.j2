<!DOCTYPE html>
<html lang="en">
<head>
<title>{{title}}</title>
<meta charset="utf-8">
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.min.css">
<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
<script>
var sptr = '</br>'
var skewThreshold = 20
//Shuffle spil icon : fill-drip
$(document).ready(function() {
    var table = $('#mainTable').DataTable({
        "data": stagedata.data,
        "select": "single",
        "columns": [
            {
                "className": 'details-control dt-body-center',
                "orderable": false,
                "data": null,
                "defaultContent": '',
                "render": function () { return '<i class="fa fa-plus-square" aria-hidden="true"></i>'; },
                width:"10px"
            },
            { "data": "jsaIds",      "title": "Stage Id</br>(Job Id)",          render: getStgIdAttId },
            { "data": "stgN",        "title": "Stage Name" },
            { "data": "subTm",       "title": "Submitted" },
            { "data": "durTm",       "title": "Duration",                       render: renderTm },
            { "data": "qntl.gcTm.4", "title": "Max</br>GC Time",                render: renderTm },
            { "data": "qntl.sDTm.4", "title": "Max</br>Sch. Delay",             render: renderTm },
            { "data": "iSzRc",       "title": "Input Read</br>Size/Records",    render: renderSzRc },
            { "data": "oSzRc",       "title": "Output Write</br>Size/Records",  render: renderSzRc },
            { "data": "srSzRc",      "title": "Shuffle Read</br>Size/Records",  render: renderSzRc },
            { "data": "swSzRc",      "title": "Shuffle Write</br>Size/Records", render: renderSzRc },
            { "data": "qntl.sWTm.4", "title": "Max</br>Write Time",             render: renderTm },
            { "data": "spDMSz",      "title": "Spill Size</br>Disk/Memory",     render: renderSzSz },
            { "data": "tsks",        "title": "Tasks:</br>Succeeded/Total",     render: renderSuccTot }
        ],
        "lengthMenu": [[200, 500, 1000, -1], [200, 500, 1000, "All"]],
        "columnDefs": [
            { targets: [2,3], className: 'dt-head-left dt-body-left' },
            { targets: '_all', className: 'dt-right' }
        ],
        "order": [[1, 'asc']]
    });
    $('#mainTable tbody').on('click', 'td.details-control', function () {
        var tr = $(this).closest('tr');
        var tdi = tr.find("i.fa");
        var row = table.row(tr);
        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
            tdi.first().removeClass('fa-minus-square');
            tdi.first().addClass('fa-plus-square');
        }
        else {
            // Open this row
            row.child(format(row.data())).show();
            tr.addClass('shown');
            tdi.first().removeClass('fa-plus-square');
            tdi.first().addClass('fa-minus-square');
        }
    });
    table.on("user-select", function (e, dt, type, cell, originalEvent) {
        if ($(cell.node()).hasClass("details-control")) {
            e.preventDefault();
        }
    });
    $('table.row-border').DataTable({
        paging: false,
        searching: true,
        info: false,
        columnDefs: [{ targets: [1,3], className: 'dt-body-right' },
                     { targets: "_all", createdCell: function (td) {$(td).css('padding-right', '5px')} } ]
    });
});
function format(data){
    var divTabStart = '<div class="float"><table class="row-border stripe" cellpadding="0" cellspacing="0" border="0" style="padding-left:40px;">';
    var divTabEnd = '</table></div>';
    var subT = divTabStart + '<tr>'
    for (var i=0; i<stagedata.distMetricsHeader.length; i++) { subT += '<th>' + stagedata.distMetricsHeader[i] + '</th>' }
    subT += '</tr>'
    for (var key in data.qntl) {
        if (data.qntl.hasOwnProperty(key)) { subT += formatRow(stagedata.distMetricsItems[key], data.qntl[key], key); }
    }
    subT += divTabEnd;
    if (data.fLst.length > 0) {
        subT += divTabStart + '<tr><th>Failure Reason</th><th># of Tasks</th></tr>';
        for (var i=0; i<data.fLst.length; i++) { subT += '<tr><td>'+ data.fLst[i].reason +'</td><td>' + data.fLst[i].count + '</td></tr>'; }
        subT += divTabEnd;
    }
    return '<div>' + subT + '</div>';
}
function formatRow(n, r, f) {
    if (r[4] === 0) return ''; // 4 = MAX
    var x=0; var row = '<tr><td>'+ n +'</td>';
    if (f.endsWith('Tm'))
        for (; x<r.length-1; x++) { row += '<td>'+ toDHMS(r[x]) +'</td>'; }
    else if (f.endsWith('Sz'))
        for (; x<r.length-1; x++) { row += '<td>'+ toTGMKB(r[x]) +'</td>'; }
    else
        for (; x<r.length-1; x++) { row += '<td>'+ commas(r[x]) +'</td>'; }
    if (x > 0) { row += '<td>' + commas(r[x]) + '</td>'; } // SKEW values
    return '<tr>' + row + '</tr>';
}
function getStgIdAttId(d, t, r) {
    if (t === 'display' || t === 'filter') {
        if (d[2] > 0) return d[1] + ' (' + d[0] + ')' + showSkewIcon(r) + '</br>(retry ' + d[2] + ')';
        return d[1] + ' (' + d[0] + ')' + showSkewIcon(r);
    }
    return d[1];
}
function renderTm(d, t, r) {
    if (t === 'display' || t === 'filter') { if (d === 0) return '-'; return toDHMS(d); } return d;
}
function renderSzRc(d, t, r) {
    if (t === 'display' || t === 'filter') {
        if (d[1] === 0) return '-'; return toTGMKB(d[0]) + sptr + commas(d[1]);
    }
    return d[1];
}
function renderSzSz(d, t, r) {
    if (t === 'display' || t === 'filter') {
        if (d[1] === 0) return '-'; return toTGMKB(d[0]) + sptr + toTGMKB(d[1]);
    }
    return d[0];
}
function showSkewIcon(r) {
    for (var key in r.qntl) {
        if (r.qntl[key][6] > skewThreshold) return ' <i class="fa fa-exclamation-triangle" aria-hidden="true" style="color:red;"></i>';
    }
    return '';
}
function renderSuccTot(d, t, r) {
    if (t === 'display' || t === 'filter') { return d[0]; }
    return d[1];
}
function toDHMS(tm) {
    if (tm == 0) return '-';
    if (tm < 1000) return tm + 'ms';
    var sec = (tm/1000) % 60; var min = Math.floor(tm/60000); var hour = Math.floor(min/60); min = min % 60;
    ret = ''; if (hour > 0) ret += hour + 'h '; if (min > 0) ret += min + 'm '; if (sec > 0) ret += sec.toFixed(1) + 's';
    return ret
}
function toTGMKB(bytes, separator = ' ') {
    if (bytes === 0) return '-';
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.min(parseInt(Math.floor(Math.log(bytes) / Math.log(1024)).toString(), 10), sizes.length - 1);
    return `${(bytes / (1024 ** i)).toFixed(i ? 1 : 0)}${separator}${sizes[i]}`;
}
function commas(x) {
    if (x == 0) return '-';
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}
var stagedata = {{tableData|tojson}};
</script>
<style type="text/css">
td.details-control {
    text-align:center;
    color:forestgreen;
    cursor: pointer;
}
tr.shown td.details-control {
    text-align:center;
    color:red;
}
table.display td, table.row-border td {
    padding-right: 5px;
}
div.float {
    display: inline-block;
    padding: 0px 5px 0px 0px;
}
</style>
</head>
<body>
<div style="font-family: Arial, sans-serif; font-size: 0.9em; padding: 12px;">
  <h1>{{title}}</h1>
  Report generated on: {{jobInfo.generatedOn}}
  <div>
   <div style="display: inline-block; padding: 0px 15px 15px 0px;">
    <h3 style="border-bottom: 1px solid #111111;" width="100%">Job Details</h3>
    <table id="jobInfoTable" class="row-border compact stripe">
    <thead style='display:none;'><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead>
    <tbody>
    <tr><td>Databricks Job Id:</td><td>{{jobInfo.dbJobId}}</td> <td>Start Time:</td><td>{{jobInfo.startTime|dt}}</td></tr>
    <tr><td>Databricks Run Id:</td><td>{{jobInfo.dbRunId}}</td> <td>Completed Time:</td><td>{{jobInfo.endTime|dt}}</td></tr>
    <tr><td>Cluster Id:</td><td>{{jobInfo.clusterId}}</td> <td>Duration:</td><td>{{jobInfo.duration|tms}}</td></tr>

    <tr><td>Spark Version:</td><td>{{jobInfo.sparkVersion}}</td> <td>Executor Memory:</td><td>{{jobInfo.executorMemory}}</td></tr>
    <tr><td>Number of Nodes:</td><td>{{jobInfo.noOfNodes}}</td> <td>Scaling Type:</td><td>{{jobInfo.scalingType}}</td></tr>
    <tr><td>Driver Node Type:</td><td>{{jobInfo.driverNode}}</td> <td>Worker Node Type:</td><td>{{jobInfo.workerNode}}</td></tr>
    </tbody>
    </table>
   </div>
  
   <div>
   <table id="mainTable" class="display" width="100%">
   <thead>
   </thead>
   </table>
   </div>
  </div>
</div>
</body>
</html>

